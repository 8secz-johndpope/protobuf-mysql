// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace soul {
class table_field_messageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<table_field_message> {
} _table_field_message_default_instance_;
class table_testDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<table_test> {
} _table_test_default_instance_;
class table_test_repeatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<table_test_repeated> {
} _table_test_repeated_default_instance_;

namespace protobuf_test_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_field_message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_field_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_field_message, filedint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_field_message, fielduint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_field_message, fieldstring_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, keyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, field1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, field2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test, field3_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test_repeated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test_repeated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_test_repeated, fields_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(table_field_message)},
  { 10, 18, sizeof(table_test)},
  { 22, 27, sizeof(table_test_repeated)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_table_field_message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_table_test_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_table_test_repeated_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _table_field_message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _table_test_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _table_test_repeated_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::soul::protobuf_MysqlDescriptor_2eproto::InitDefaults();
  _table_field_message_default_instance_.DefaultConstruct();
  _table_test_default_instance_.DefaultConstruct();
  _table_test_repeated_default_instance_.DefaultConstruct();
  _table_test_default_instance_.get_mutable()->field3_ = const_cast< ::soul::table_field_message*>(
      ::soul::table_field_message::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ntest.proto\022\004soul\032\025MysqlDescriptor.prot"
      "o\"O\n\023table_field_message\022\020\n\010filedint\030\001 \001"
      "(\005\022\021\n\tfielduint\030\002 \001(\r\022\023\n\013fieldstring\030\003 \001"
      "(\t\"q\n\ntable_test\022\023\n\005keyid\030\001 \001(\rB\004\210\361\004\001\022\023\n"
      "\006field1\030\002 \001(\rB\003\300>\001\022\016\n\006field2\030\003 \001(\r\022)\n\006fi"
      "eld3\030\004 \001(\0132\031.soul.table_field_message\"7\n"
      "\023table_test_repeated\022 \n\006fields\030\001 \003(\0132\020.s"
      "oul.table_test"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  ::soul::protobuf_MysqlDescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int table_field_message::kFiledintFieldNumber;
const int table_field_message::kFielduintFieldNumber;
const int table_field_message::kFieldstringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

table_field_message::table_field_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:soul.table_field_message)
}
table_field_message::table_field_message(const table_field_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fieldstring()) {
    fieldstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fieldstring_);
  }
  ::memcpy(&filedint_, &from.filedint_,
    reinterpret_cast<char*>(&fielduint_) -
    reinterpret_cast<char*>(&filedint_) + sizeof(fielduint_));
  // @@protoc_insertion_point(copy_constructor:soul.table_field_message)
}

void table_field_message::SharedCtor() {
  _cached_size_ = 0;
  fieldstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filedint_, 0, reinterpret_cast<char*>(&fielduint_) -
    reinterpret_cast<char*>(&filedint_) + sizeof(fielduint_));
}

table_field_message::~table_field_message() {
  // @@protoc_insertion_point(destructor:soul.table_field_message)
  SharedDtor();
}

void table_field_message::SharedDtor() {
  fieldstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void table_field_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_field_message::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[0].descriptor;
}

const table_field_message& table_field_message::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

table_field_message* table_field_message::New(::google::protobuf::Arena* arena) const {
  table_field_message* n = new table_field_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void table_field_message::Clear() {
// @@protoc_insertion_point(message_clear_start:soul.table_field_message)
  if (has_fieldstring()) {
    GOOGLE_DCHECK(!fieldstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*fieldstring_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&filedint_, 0, reinterpret_cast<char*>(&fielduint_) -
      reinterpret_cast<char*>(&filedint_) + sizeof(fielduint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool table_field_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:soul.table_field_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 filedint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_filedint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filedint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fielduint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fielduint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fielduint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fieldstring = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldstring().data(), this->fieldstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "soul.table_field_message.fieldstring");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:soul.table_field_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:soul.table_field_message)
  return false;
#undef DO_
}

void table_field_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:soul.table_field_message)
  // optional int32 filedint = 1;
  if (has_filedint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filedint(), output);
  }

  // optional uint32 fielduint = 2;
  if (has_fielduint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fielduint(), output);
  }

  // optional string fieldstring = 3;
  if (has_fieldstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldstring().data(), this->fieldstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soul.table_field_message.fieldstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fieldstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:soul.table_field_message)
}

::google::protobuf::uint8* table_field_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:soul.table_field_message)
  // optional int32 filedint = 1;
  if (has_filedint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filedint(), target);
  }

  // optional uint32 fielduint = 2;
  if (has_fielduint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fielduint(), target);
  }

  // optional string fieldstring = 3;
  if (has_fieldstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldstring().data(), this->fieldstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soul.table_field_message.fieldstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fieldstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:soul.table_field_message)
  return target;
}

size_t table_field_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:soul.table_field_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string fieldstring = 3;
    if (has_fieldstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldstring());
    }

    // optional int32 filedint = 1;
    if (has_filedint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filedint());
    }

    // optional uint32 fielduint = 2;
    if (has_fielduint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fielduint());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_field_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:soul.table_field_message)
  GOOGLE_DCHECK_NE(&from, this);
  const table_field_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const table_field_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:soul.table_field_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:soul.table_field_message)
    MergeFrom(*source);
  }
}

void table_field_message::MergeFrom(const table_field_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:soul.table_field_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_fieldstring()) {
      set_has_fieldstring();
      fieldstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fieldstring_);
    }
    if (from.has_filedint()) {
      set_filedint(from.filedint());
    }
    if (from.has_fielduint()) {
      set_fielduint(from.fielduint());
    }
  }
}

void table_field_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:soul.table_field_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_field_message::CopyFrom(const table_field_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:soul.table_field_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_field_message::IsInitialized() const {
  return true;
}

void table_field_message::Swap(table_field_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void table_field_message::InternalSwap(table_field_message* other) {
  fieldstring_.Swap(&other->fieldstring_);
  std::swap(filedint_, other->filedint_);
  std::swap(fielduint_, other->fielduint_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata table_field_message::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// table_field_message

// optional int32 filedint = 1;
bool table_field_message::has_filedint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void table_field_message::set_has_filedint() {
  _has_bits_[0] |= 0x00000002u;
}
void table_field_message::clear_has_filedint() {
  _has_bits_[0] &= ~0x00000002u;
}
void table_field_message::clear_filedint() {
  filedint_ = 0;
  clear_has_filedint();
}
::google::protobuf::int32 table_field_message::filedint() const {
  // @@protoc_insertion_point(field_get:soul.table_field_message.filedint)
  return filedint_;
}
void table_field_message::set_filedint(::google::protobuf::int32 value) {
  set_has_filedint();
  filedint_ = value;
  // @@protoc_insertion_point(field_set:soul.table_field_message.filedint)
}

// optional uint32 fielduint = 2;
bool table_field_message::has_fielduint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void table_field_message::set_has_fielduint() {
  _has_bits_[0] |= 0x00000004u;
}
void table_field_message::clear_has_fielduint() {
  _has_bits_[0] &= ~0x00000004u;
}
void table_field_message::clear_fielduint() {
  fielduint_ = 0u;
  clear_has_fielduint();
}
::google::protobuf::uint32 table_field_message::fielduint() const {
  // @@protoc_insertion_point(field_get:soul.table_field_message.fielduint)
  return fielduint_;
}
void table_field_message::set_fielduint(::google::protobuf::uint32 value) {
  set_has_fielduint();
  fielduint_ = value;
  // @@protoc_insertion_point(field_set:soul.table_field_message.fielduint)
}

// optional string fieldstring = 3;
bool table_field_message::has_fieldstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void table_field_message::set_has_fieldstring() {
  _has_bits_[0] |= 0x00000001u;
}
void table_field_message::clear_has_fieldstring() {
  _has_bits_[0] &= ~0x00000001u;
}
void table_field_message::clear_fieldstring() {
  fieldstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fieldstring();
}
const ::std::string& table_field_message::fieldstring() const {
  // @@protoc_insertion_point(field_get:soul.table_field_message.fieldstring)
  return fieldstring_.GetNoArena();
}
void table_field_message::set_fieldstring(const ::std::string& value) {
  set_has_fieldstring();
  fieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:soul.table_field_message.fieldstring)
}
#if LANG_CXX11
void table_field_message::set_fieldstring(::std::string&& value) {
  set_has_fieldstring();
  fieldstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:soul.table_field_message.fieldstring)
}
#endif
void table_field_message::set_fieldstring(const char* value) {
  set_has_fieldstring();
  fieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:soul.table_field_message.fieldstring)
}
void table_field_message::set_fieldstring(const char* value, size_t size) {
  set_has_fieldstring();
  fieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:soul.table_field_message.fieldstring)
}
::std::string* table_field_message::mutable_fieldstring() {
  set_has_fieldstring();
  // @@protoc_insertion_point(field_mutable:soul.table_field_message.fieldstring)
  return fieldstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* table_field_message::release_fieldstring() {
  // @@protoc_insertion_point(field_release:soul.table_field_message.fieldstring)
  clear_has_fieldstring();
  return fieldstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void table_field_message::set_allocated_fieldstring(::std::string* fieldstring) {
  if (fieldstring != NULL) {
    set_has_fieldstring();
  } else {
    clear_has_fieldstring();
  }
  fieldstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldstring);
  // @@protoc_insertion_point(field_set_allocated:soul.table_field_message.fieldstring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int table_test::kKeyidFieldNumber;
const int table_test::kField1FieldNumber;
const int table_test::kField2FieldNumber;
const int table_test::kField3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

table_test::table_test()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:soul.table_test)
}
table_test::table_test(const table_test& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field3()) {
    field3_ = new ::soul::table_field_message(*from.field3_);
  } else {
    field3_ = NULL;
  }
  ::memcpy(&keyid_, &from.keyid_,
    reinterpret_cast<char*>(&field2_) -
    reinterpret_cast<char*>(&keyid_) + sizeof(field2_));
  // @@protoc_insertion_point(copy_constructor:soul.table_test)
}

void table_test::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&field3_, 0, reinterpret_cast<char*>(&field2_) -
    reinterpret_cast<char*>(&field3_) + sizeof(field2_));
}

table_test::~table_test() {
  // @@protoc_insertion_point(destructor:soul.table_test)
  SharedDtor();
}

void table_test::SharedDtor() {
  if (this != internal_default_instance()) {
    delete field3_;
  }
}

void table_test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_test::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[1].descriptor;
}

const table_test& table_test::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

table_test* table_test::New(::google::protobuf::Arena* arena) const {
  table_test* n = new table_test;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void table_test::Clear() {
// @@protoc_insertion_point(message_clear_start:soul.table_test)
  if (has_field3()) {
    GOOGLE_DCHECK(field3_ != NULL);
    field3_->::soul::table_field_message::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&keyid_, 0, reinterpret_cast<char*>(&field2_) -
      reinterpret_cast<char*>(&keyid_) + sizeof(field2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool table_test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:soul.table_test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyid = 1 [(.soul.primarykey) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_keyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 field1 = 2 [(.soul.updatekey) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_field1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 field2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_field2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .soul.table_field_message field3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:soul.table_test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:soul.table_test)
  return false;
#undef DO_
}

void table_test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:soul.table_test)
  // optional uint32 keyid = 1 [(.soul.primarykey) = true];
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyid(), output);
  }

  // optional uint32 field1 = 2 [(.soul.updatekey) = true];
  if (has_field1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->field1(), output);
  }

  // optional uint32 field2 = 3;
  if (has_field2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->field2(), output);
  }

  // optional .soul.table_field_message field3 = 4;
  if (has_field3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->field3_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:soul.table_test)
}

::google::protobuf::uint8* table_test::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:soul.table_test)
  // optional uint32 keyid = 1 [(.soul.primarykey) = true];
  if (has_keyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyid(), target);
  }

  // optional uint32 field1 = 2 [(.soul.updatekey) = true];
  if (has_field1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->field1(), target);
  }

  // optional uint32 field2 = 3;
  if (has_field2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->field2(), target);
  }

  // optional .soul.table_field_message field3 = 4;
  if (has_field3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->field3_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:soul.table_test)
  return target;
}

size_t table_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:soul.table_test)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .soul.table_field_message field3 = 4;
    if (has_field3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->field3_);
    }

    // optional uint32 keyid = 1 [(.soul.primarykey) = true];
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyid());
    }

    // optional uint32 field1 = 2 [(.soul.updatekey) = true];
    if (has_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->field1());
    }

    // optional uint32 field2 = 3;
    if (has_field2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->field2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_test::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:soul.table_test)
  GOOGLE_DCHECK_NE(&from, this);
  const table_test* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const table_test>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:soul.table_test)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:soul.table_test)
    MergeFrom(*source);
  }
}

void table_test::MergeFrom(const table_test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:soul.table_test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_field3()) {
      mutable_field3()->::soul::table_field_message::MergeFrom(from.field3());
    }
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_field1()) {
      set_field1(from.field1());
    }
    if (from.has_field2()) {
      set_field2(from.field2());
    }
  }
}

void table_test::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:soul.table_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_test::CopyFrom(const table_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:soul.table_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_test::IsInitialized() const {
  return true;
}

void table_test::Swap(table_test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void table_test::InternalSwap(table_test* other) {
  std::swap(field3_, other->field3_);
  std::swap(keyid_, other->keyid_);
  std::swap(field1_, other->field1_);
  std::swap(field2_, other->field2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata table_test::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// table_test

// optional uint32 keyid = 1 [(.soul.primarykey) = true];
bool table_test::has_keyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void table_test::set_has_keyid() {
  _has_bits_[0] |= 0x00000002u;
}
void table_test::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000002u;
}
void table_test::clear_keyid() {
  keyid_ = 0u;
  clear_has_keyid();
}
::google::protobuf::uint32 table_test::keyid() const {
  // @@protoc_insertion_point(field_get:soul.table_test.keyid)
  return keyid_;
}
void table_test::set_keyid(::google::protobuf::uint32 value) {
  set_has_keyid();
  keyid_ = value;
  // @@protoc_insertion_point(field_set:soul.table_test.keyid)
}

// optional uint32 field1 = 2 [(.soul.updatekey) = true];
bool table_test::has_field1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void table_test::set_has_field1() {
  _has_bits_[0] |= 0x00000004u;
}
void table_test::clear_has_field1() {
  _has_bits_[0] &= ~0x00000004u;
}
void table_test::clear_field1() {
  field1_ = 0u;
  clear_has_field1();
}
::google::protobuf::uint32 table_test::field1() const {
  // @@protoc_insertion_point(field_get:soul.table_test.field1)
  return field1_;
}
void table_test::set_field1(::google::protobuf::uint32 value) {
  set_has_field1();
  field1_ = value;
  // @@protoc_insertion_point(field_set:soul.table_test.field1)
}

// optional uint32 field2 = 3;
bool table_test::has_field2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void table_test::set_has_field2() {
  _has_bits_[0] |= 0x00000008u;
}
void table_test::clear_has_field2() {
  _has_bits_[0] &= ~0x00000008u;
}
void table_test::clear_field2() {
  field2_ = 0u;
  clear_has_field2();
}
::google::protobuf::uint32 table_test::field2() const {
  // @@protoc_insertion_point(field_get:soul.table_test.field2)
  return field2_;
}
void table_test::set_field2(::google::protobuf::uint32 value) {
  set_has_field2();
  field2_ = value;
  // @@protoc_insertion_point(field_set:soul.table_test.field2)
}

// optional .soul.table_field_message field3 = 4;
bool table_test::has_field3() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void table_test::set_has_field3() {
  _has_bits_[0] |= 0x00000001u;
}
void table_test::clear_has_field3() {
  _has_bits_[0] &= ~0x00000001u;
}
void table_test::clear_field3() {
  if (field3_ != NULL) field3_->::soul::table_field_message::Clear();
  clear_has_field3();
}
const ::soul::table_field_message& table_test::field3() const {
  // @@protoc_insertion_point(field_get:soul.table_test.field3)
  return field3_ != NULL ? *field3_
                         : *::soul::table_field_message::internal_default_instance();
}
::soul::table_field_message* table_test::mutable_field3() {
  set_has_field3();
  if (field3_ == NULL) {
    field3_ = new ::soul::table_field_message;
  }
  // @@protoc_insertion_point(field_mutable:soul.table_test.field3)
  return field3_;
}
::soul::table_field_message* table_test::release_field3() {
  // @@protoc_insertion_point(field_release:soul.table_test.field3)
  clear_has_field3();
  ::soul::table_field_message* temp = field3_;
  field3_ = NULL;
  return temp;
}
void table_test::set_allocated_field3(::soul::table_field_message* field3) {
  delete field3_;
  field3_ = field3;
  if (field3) {
    set_has_field3();
  } else {
    clear_has_field3();
  }
  // @@protoc_insertion_point(field_set_allocated:soul.table_test.field3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int table_test_repeated::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

table_test_repeated::table_test_repeated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:soul.table_test_repeated)
}
table_test_repeated::table_test_repeated(const table_test_repeated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:soul.table_test_repeated)
}

void table_test_repeated::SharedCtor() {
  _cached_size_ = 0;
}

table_test_repeated::~table_test_repeated() {
  // @@protoc_insertion_point(destructor:soul.table_test_repeated)
  SharedDtor();
}

void table_test_repeated::SharedDtor() {
}

void table_test_repeated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_test_repeated::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[2].descriptor;
}

const table_test_repeated& table_test_repeated::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

table_test_repeated* table_test_repeated::New(::google::protobuf::Arena* arena) const {
  table_test_repeated* n = new table_test_repeated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void table_test_repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:soul.table_test_repeated)
  fields_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool table_test_repeated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:soul.table_test_repeated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .soul.table_test fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:soul.table_test_repeated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:soul.table_test_repeated)
  return false;
#undef DO_
}

void table_test_repeated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:soul.table_test_repeated)
  // repeated .soul.table_test fields = 1;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:soul.table_test_repeated)
}

::google::protobuf::uint8* table_test_repeated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:soul.table_test_repeated)
  // repeated .soul.table_test fields = 1;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fields(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:soul.table_test_repeated)
  return target;
}

size_t table_test_repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:soul.table_test_repeated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .soul.table_test fields = 1;
  {
    unsigned int count = this->fields_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_test_repeated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:soul.table_test_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  const table_test_repeated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const table_test_repeated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:soul.table_test_repeated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:soul.table_test_repeated)
    MergeFrom(*source);
  }
}

void table_test_repeated::MergeFrom(const table_test_repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:soul.table_test_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
}

void table_test_repeated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:soul.table_test_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_test_repeated::CopyFrom(const table_test_repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:soul.table_test_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_test_repeated::IsInitialized() const {
  return true;
}

void table_test_repeated::Swap(table_test_repeated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void table_test_repeated::InternalSwap(table_test_repeated* other) {
  fields_.UnsafeArenaSwap(&other->fields_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata table_test_repeated::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// table_test_repeated

// repeated .soul.table_test fields = 1;
int table_test_repeated::fields_size() const {
  return fields_.size();
}
void table_test_repeated::clear_fields() {
  fields_.Clear();
}
const ::soul::table_test& table_test_repeated::fields(int index) const {
  // @@protoc_insertion_point(field_get:soul.table_test_repeated.fields)
  return fields_.Get(index);
}
::soul::table_test* table_test_repeated::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:soul.table_test_repeated.fields)
  return fields_.Mutable(index);
}
::soul::table_test* table_test_repeated::add_fields() {
  // @@protoc_insertion_point(field_add:soul.table_test_repeated.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::soul::table_test >*
table_test_repeated::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:soul.table_test_repeated.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::soul::table_test >&
table_test_repeated::fields() const {
  // @@protoc_insertion_point(field_list:soul.table_test_repeated.fields)
  return fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace soul

// @@protoc_insertion_point(global_scope)
